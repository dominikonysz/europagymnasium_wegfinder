/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package egkerpen_wegfinder;

import db.DBController;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import javax.swing.JOptionPane;
import listenklassen.List_extended;

/**
 *
 * @author User
 */
public class Wegfinder extends javax.swing.JFrame {

    DBController con;
    Writer fw;
    File f;
    
    /**
     * Creates new form Wegfinder
     */
    public Wegfinder() {
        initComponents();
    }
    
    public Wegfinder(String title) {
        super(title);
        initComponents();
        con = DBController.getInstance();
        
        try {
            f = new File("Portable.txt");
            fw = new FileWriter(f);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMI_LehrerHinzufuegen = new javax.swing.JMenuItem();
        jMI_LehrerEntfernen = new javax.swing.JMenuItem();
        jMI_RaumAendern = new javax.swing.JMenuItem();
        jMI_Lehrerliste = new javax.swing.JMenuItem();
        jMI_Save = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(920, 500));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jMenu1.setText("Verwaltung");

        jMI_LehrerHinzufuegen.setText("Lehrer hinzufügen");
        jMI_LehrerHinzufuegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerHinzufuegenActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_LehrerHinzufuegen);

        jMI_LehrerEntfernen.setText("Lehrer entfernen");
        jMI_LehrerEntfernen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerEntfernenActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_LehrerEntfernen);

        jMI_RaumAendern.setText("Raum ändern");
        jMI_RaumAendern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_RaumAendernActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_RaumAendern);

        jMI_Lehrerliste.setText("Lehrerliste");
        jMI_Lehrerliste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerlisteActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Lehrerliste);

        jMI_Save.setText("Speichern");
        jMI_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_SaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Save);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMI_LehrerHinzufuegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerHinzufuegenActionPerformed
        String raum = JOptionPane.showInputDialog("Raum:");
        String name = JOptionPane.showInputDialog("Nachname:");
        String vorname = JOptionPane.showInputDialog("Vorname:");
        vorname = vorname.equals("") ? "-" : vorname;
        String verhindert = JOptionPane.showInputDialog("Verhindert(0|1):");
        verhindert = !(verhindert.equals("0") || verhindert.equals("1")) ? "0" : verhindert;
        con.executeUpdate("INSERT INTO raumverteilung VALUES ('" + raum + "', '" + name + "', '" + vorname + "', " + verhindert + ")");
        con.executeUpdate("INSERT INTO lehrer VALUES ('" + name + "', '" + vorname + "')");
    }//GEN-LAST:event_jMI_LehrerHinzufuegenActionPerformed

    private void jMI_LehrerEntfernenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerEntfernenActionPerformed
        String name = JOptionPane.showInputDialog("Name:");
        con.executeUpdate("DELETE FROM raumverteilung WHERE nachname = '" + name + "'");
    }//GEN-LAST:event_jMI_LehrerEntfernenActionPerformed

    private void jMI_RaumAendernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_RaumAendernActionPerformed
        String raum = JOptionPane.showInputDialog("Raum:");
        String name = JOptionPane.showInputDialog("Nachname:");
        con.executeUpdate("UPDATE raumverteilung SET raum = + '" + raum + "' WHERE nachname = '" + name + "'");
    }//GEN-LAST:event_jMI_RaumAendernActionPerformed

    private void jMI_LehrerlisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerlisteActionPerformed
        List_extended<List_extended<String>> lehrerList;
        con.executeQuery("SELECT DISTINCT * FROM lehrer ORDER BY nachname");
        lehrerList = con.getResults();
        String[][] lehrer = new String[con.getResultsAmount()][2];
            
            lehrerList.toFirst();
            for(int i = 0; i < lehrer.length; i++){
                List_extended<String> l2 = lehrerList.getObject();
                l2.toFirst();
                
                for(int j = 0; j < lehrer[i].length; j++){
                    lehrer[i][j] = l2.getObject();
                    l2.next();
                }
                
                lehrerList.next();
            }
        String table = "";
        for(String[] s : lehrer) {
            table += s[0] + ", " + s[1] + "\n";
        }
        JOptionPane.showMessageDialog(this, table);
    }//GEN-LAST:event_jMI_LehrerlisteActionPerformed

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        repaint();
    }//GEN-LAST:event_formAncestorResized

    private void jMI_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_SaveActionPerformed
        con.executeQuery("SELECT * FROM raumverteilung ORDER BY raum");
        List_extended<List_extended<String>> list;
        String[][] array = new String[con.getResultsAmount()][4];
        list = con.getResults();
        
        list.toFirst();
        for(int i = 0; i < array.length; i++){
            List_extended<String> l2 = list.getObject();
            l2.toFirst();

            for(int j = 0; j < array[i].length; j++){
                array[i][j] = l2.getObject();
                l2.next();
            }

            list.next();
        }
            
        for(String[] s : array) {
            insertToFile(s[0], s[1], s[2], Integer.parseInt(s[3]));
        }   
        
        JOptionPane.showMessageDialog(this, "Erfolgreich als \"Portable.txt\" gespeichert!");
    }//GEN-LAST:event_jMI_SaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Wegfinder().setVisible(true);
            }
        });
    }
    
    /**
     * This method inserts the values of the text fields into a file creating a new data set.
     * 
     * @param raum The room where the teacher is in.
     * @param nachname The teacher's last name.
     * @param vorname The teacher's first name.
     * @param verhindert A value indicating whether the teacher is absent or not
     */
    private void insertToFile(String raum, String nachname, String vorname, int verhindert) {
        try {
            fw.write(raum + ";" + nachname + ";" + vorname + ";" + String.valueOf(verhindert));
            fw.append(System.getProperty("line.separator"));
            fw.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMI_LehrerEntfernen;
    private javax.swing.JMenuItem jMI_LehrerHinzufuegen;
    private javax.swing.JMenuItem jMI_Lehrerliste;
    private javax.swing.JMenuItem jMI_RaumAendern;
    private javax.swing.JMenuItem jMI_Save;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
