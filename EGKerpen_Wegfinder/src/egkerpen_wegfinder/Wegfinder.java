/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package egkerpen_wegfinder;

import db.DBController;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import listenklassen.List_extended;

/**
 *
 * @author User
 */
public class Wegfinder extends javax.swing.JFrame {

    DBController con;
    Writer fw;
    File f;
    String[] allRooms;
    boolean lnInputStarted, fnInputStarted;
    JFrame frame;

    
    /**
     * Creates new form Wegfinder
     */
    public Wegfinder() {
        initComponents();
    }
    
    public Wegfinder(String title) {
        super(title);
        initComponents();
        con = DBController.getInstance();
        allRooms = new String[] {"Raum 38", "Raum 39", "Raum 42", "Raum 63", "Raum 64", "Raum 65", "Raum 66", "Raum 67", "Raum 70", "Raum 71", "Raum 72", "Raum 73", "Raum 87", "Raum 88", "Raum 89", "Raum 90", "Raum 92", "Raum 93", "Raum 94", "Raum 95", "Raum 96", "Raum 97", "Raum 104", "Raum 106", "Raum 107", "Raum 108", "Raum 109", "Raum 110", "Raum 132", "Raum 134", "Raum 135", "Raum 136", "Raum 137", "Raum 141", "Raum 142", "Raum 144", "Raum 145", "Raum 150", "Raum 151", "Raum 154", "Raum 155", "Raum 156", "Raum 166", "Raum 167", "Raum 168", "Raum 169", "Raum 170", "Raum 171", "Raum 174", "Raum 175", "Raum 184", "Raum 185", "Raum 188", "Raum 189", "Raum 190", "Raum 191", "Raum 192/193", "Raum 200", "Raum 203/204", "Raum 205", "Raum 206", "Raum 208", "Raum 209", "Raum 210", "Raum 212", "Raum 213", "Raum 215", "Raum 216", "Raum 217", "Raum 218", "Raum 219", "Raum 220", "Raum 222", "Raum 223", "Raum 227", "Raum 228", "Raum 229", "Raum 230", "Raum 231", "Raum 235", "Raum 236", "Raum 237", "Raum 238", "Raum 240", "Raum 241", "Raum 242", "Raum 250", "Raum 251", "Raum 253", "Raum 254", "Raum 255", "Raum 262", "Raum 263", "Raum 264", "Raum 266", "Raum 267", "Raum 269", "Raum 270", "Raum 283", "Raum 284", "Raum 286", "Raum 288", "Raum 289", "Raum 290", "Raum 293", "Raum 302", "Raum 303", "Raum 304", "Raum 305", "Raum 306", "Raum 307", "Raum 308", "Raum 309", "Raum 310", "Raum 311", "Raum 312", "Raum 313", "Raum 314", "Werkraum 8", "Werkraum 14", "Werkraum 15", "Werkraum 17", "Werkraum 20", "Werkraum 21", "Werkraum 24", "Werkraum 27", "Werkraum 32", "Kunstraum 53", "Kunstraum 59", "Technikraum 62", "Mensa", "Büro der Schulleitung/Sekretariat", "Büro der stellv. Schulleitung", "Saftladen", "Spielekeller", "Bibliothek"};
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMI_LehrerHinzufuegen = new javax.swing.JMenuItem();
        jMI_LehrerEntfernen = new javax.swing.JMenuItem();
        jMI_RaumAendern = new javax.swing.JMenuItem();
        jMI_Lehrerliste = new javax.swing.JMenuItem();
        jMI_Save = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(920, 500));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jMenu1.setText("Verwaltung");

        jMI_LehrerHinzufuegen.setText("Lehrer hinzufügen");
        jMI_LehrerHinzufuegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerHinzufuegenActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_LehrerHinzufuegen);

        jMI_LehrerEntfernen.setText("Lehrer entfernen");
        jMI_LehrerEntfernen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerEntfernenActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_LehrerEntfernen);

        jMI_RaumAendern.setText("Raum ändern");
        jMI_RaumAendern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_RaumAendernActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_RaumAendern);

        jMI_Lehrerliste.setText("Lehrerliste");
        jMI_Lehrerliste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerlisteActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Lehrerliste);

        jMI_Save.setText("Speichern");
        jMI_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_SaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Save);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMI_LehrerHinzufuegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerHinzufuegenActionPerformed
        Wegfinder w = this;
        
        lnInputStarted = true;
        fnInputStarted = true;
        frame = new JFrame("Lehrer hinzufügen");
        frame.setSize(280, 200);
        frame.setResizable(false);
        frame.setLayout(null);
        
        JComboBox rooms = new JComboBox();
        rooms.setModel(new DefaultComboBoxModel(allRooms));
        rooms.setBounds(19, 20, frame.getWidth() - 43, 23);
        
        JTextField lastname = new JTextField("Nachname");
        lastname.setBounds(19, 50, frame.getWidth() - 43, 23);
        lastname.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(lnInputStarted) {
                    lastname.setText("");
                    lnInputStarted = false;
                }
            }
        });
        
        JTextField firstname = new JTextField("Vorname");
        firstname.setBounds(19, 80, frame.getWidth() - 43, 23);
        firstname.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(fnInputStarted) {
                    firstname.setText("");
                    fnInputStarted = false;
                }
            }
        });
        
        JCheckBox prevented = new JCheckBox("Verhindert");
        prevented.setBounds(19, 110, frame.getWidth() - 43, 23);
        
        JButton bInsert = new JButton("Hinzufügen");
        bInsert.setBounds(19, 140, frame.getWidth() - 43, 23);
        bInsert.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(lastname.getText().equals("") || lastname.getText().equals("Nachname") || firstname.getText().equals("Vorname")) {
                    JOptionPane.showMessageDialog(w, "Bitte einen gültigen Lehrer eingeben");
                }
                else {
                    con.executeQuery("SELECT * FROM lehrer WHERE nachname = '" + lastname.getText() + "' AND vorname = '" + (firstname.getText().equals("") ? "-" : firstname.getText()) + "'");
                    if(con.getResultsAmount() == 0) {
                        con.executeUpdate("INSERT INTO raumverteilung VALUES ('" 
                                + rooms.getSelectedItem() + "', '" + lastname.getText() + "', '" 
                                + (firstname.getText().equals("") ? "-" : firstname.getText()) 
                                + "', " + (prevented.isSelected() ? 1 : 0) + ")");
                        con.executeUpdate("INSERT INTO lehrer VALUES ('" + lastname.getText() 
                                + "', '" + (firstname.getText().equals("") ? "-" : firstname.getText()) + "')");
                        JOptionPane.showMessageDialog(frame, firstname.getText() + " " 
                                + lastname.getText() + " wurde erfolgreich in " 
                                + rooms.getSelectedItem() + " eingetragen");
                        lnInputStarted = true;
                        fnInputStarted = true;
                        rooms.setSelectedIndex(0);
                        lastname.setText("Nachname");
                        firstname.setText("Vorname");
                    }
                    else {
                        JOptionPane.showMessageDialog(w, "Lehrer bereits vorhanden");
                    }
                }
            }
        });
        
        frame.getContentPane().add(rooms);
        frame.getContentPane().add(lastname);
        frame.getContentPane().add(firstname);
        frame.getContentPane().add(prevented);
        frame.getContentPane().add(bInsert);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_LehrerHinzufuegenActionPerformed

    private void jMI_LehrerEntfernenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerEntfernenActionPerformed
        frame = new JFrame("Lehrer entfernen");
        frame.setSize(280, 120);
        frame.setResizable(false);
        frame.setLayout(null);
        
        JComboBox teachers = new JComboBox();
        teachers.setModel(new DefaultComboBoxModel(getAllTeachersNames()));
        teachers.setBounds(19, 20, frame.getWidth() - 43, 23);
        
        JButton bRemove = new JButton("Löschen");
        bRemove.setBounds(19, 50, frame.getWidth() - 43, 23);
        bRemove.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String item = (String) teachers.getSelectedItem();
                if(item != null) {
                    String firstname = item.substring(0, item.indexOf(" "));
                    String lastname = item.substring(item.indexOf(" ") + 1);
                    con.executeUpdate("DELETE FROM raumverteilung WHERE nachname = '" 
                            + lastname + "' AND vorname = '" + firstname + "'");
                    con.executeUpdate("DELETE FROM lehrer WHERE nachname = '" 
                            + lastname + "' AND vorname = '" + firstname + "'");
                    JOptionPane.showMessageDialog(frame, "\"" + firstname + " " + lastname + "\" wurde erfolgreich entfernt");
                    teachers.setModel(new DefaultComboBoxModel(getAllTeachersNames()));
                }
                else {
                    JOptionPane.showMessageDialog(frame, "Bitte einen Lehrer auswählen");
                }
            }
        });
        
        frame.getContentPane().add(teachers);
        frame.getContentPane().add(bRemove);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_LehrerEntfernenActionPerformed

    private void jMI_RaumAendernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_RaumAendernActionPerformed
        frame = new JFrame("Raum ändern");
        frame.setSize(280, 150);
        frame.setResizable(false);
        frame.setLayout(null);
        
        JComboBox rooms = new JComboBox();
        rooms.setModel(new DefaultComboBoxModel(allRooms));
        rooms.setBounds(19, 20, frame.getWidth() - 43, 23);
        
        JComboBox teachers = new JComboBox();
        teachers.setModel(new DefaultComboBoxModel(getAllTeachersLastName()));
        teachers.setBounds(19, 50, frame.getWidth() - 43, 23);
        teachers.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED) {
                    rooms.setSelectedItem(getRoomOfTeacher((String) e.getItem()));
                }
            }
        });
        
        if(teachers.getSelectedItem() != null)
            rooms.setSelectedItem(getRoomOfTeacher((String) teachers.getSelectedItem()));
        
        JButton bUpdate = new JButton("Ändern");
        bUpdate.setBounds(19, 80, frame.getWidth() - 43, 23);
        bUpdate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO: Support for first and last name, so every teacher can get selected
                con.executeUpdate("UPDATE raumverteilung SET raum = '" + rooms.getSelectedItem() 
                        + "' WHERE nachname = '" + teachers.getSelectedItem() + "'");
                JOptionPane.showMessageDialog(frame, "Raum von \"" + teachers.getSelectedItem() + "\" wurde erfolgreich zu " + rooms.getSelectedItem() + " geändert");
            }
        });
        
        frame.getContentPane().add(rooms);
        frame.getContentPane().add(teachers);
        frame.getContentPane().add(bUpdate);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_RaumAendernActionPerformed

    private void jMI_LehrerlisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerlisteActionPerformed
        List_extended<List_extended<String>> lehrerList;
        //con.executeQuery("SELECT DISTINCT * FROM lehrer ORDER BY nachname");
        con.executeQuery("SELECT lehrer.nachname, lehrer.vorname, raumverteilung.raum FROM lehrer LEFT JOIN raumverteilung ON lehrer.nachname = raumverteilung.nachname AND lehrer.vorname = raumverteilung.vorname ORDER BY lehrer.nachname");
        lehrerList = con.getResults();
        String[][] lehrer = new String[con.getResultsAmount()][3];
            
        lehrerList.toFirst();
        for(int i = 0; i < lehrer.length; i++){
            List_extended<String> l2 = lehrerList.getObject();
            l2.toFirst();

            for(int j = 0; j < lehrer[i].length; j++){
                lehrer[i][j] = l2.getObject();
                l2.next();
            }

            lehrerList.next();
        }
        BufferedImage img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = img.createGraphics();
        FontMetrics fm = g2d.getFontMetrics();

        String table = "";
        String newRow;
        for(String[] s : lehrer) {
            newRow = "  " + s[0] + ", " + s[1];
            int missingSpace = 150 - fm.stringWidth(newRow);
            for (int i = 0; i < missingSpace / fm.stringWidth(" "); i++) {
                newRow += " ";
            }
            newRow += s[2] + "\n";
            table += newRow;
        }
        g2d.dispose();
        
        // new window with a textarea for all teachers
        frame = new JFrame("Lehrerliste");
        frame.setSize(300, 400);
        frame.setResizable(false);
        
        JTextArea textArea = new JTextArea();
        textArea.setText(table);
        textArea.setEditable(false);
        
        JScrollPane scrollPane = new JScrollPane(textArea);
        
        frame.add(scrollPane);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_LehrerlisteActionPerformed

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        repaint();
    }//GEN-LAST:event_formAncestorResized

    private void jMI_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_SaveActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(null);
        File f;
        String path = "";
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            f = fc.getSelectedFile();
            path = f.getPath();
        }
        
        try {
            f = new File(path + "\\Portable.txt");
            fw = new FileWriter(f);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Datei kann nicht erstellt werden");
        }
        
        con.executeQuery("SELECT * FROM raumverteilung ORDER BY raum");
        List_extended<List_extended<String>> list;
        String[][] array = new String[con.getResultsAmount()][4];
        list = con.getResults();
        
        list.toFirst();
        for(int i = 0; i < array.length; i++){
            List_extended<String> l2 = list.getObject();
            l2.toFirst();

            for(int j = 0; j < array[i].length; j++){
                array[i][j] = l2.getObject();
                l2.next();
            }

            list.next();
        }
            
        for(String[] s : array) {
            insertToFile(s[0], s[1], s[2], Integer.parseInt(s[3]));
        }   
        
        JOptionPane.showMessageDialog(this, "Erfolgreich als \"Portable.txt\" gespeichert!");
    }//GEN-LAST:event_jMI_SaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Wegfinder().setVisible(true);
            }
        });
    }
    
    /**
     * This method inserts the values of the text fields into a file creating a new data set.
     * 
     * @param raum The room where the teacher is in.
     * @param nachname The teacher's last name.
     * @param vorname The teacher's first name.
     * @param verhindert A value indicating whether the teacher is absent or not
     */
    private void insertToFile(String raum, String nachname, String vorname, int verhindert) {
        try {
            fw.write(raum + ";" + nachname + ";" + vorname + ";" + String.valueOf(verhindert));
            fw.append(System.getProperty("line.separator"));
            fw.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Returns the last names of all teachers as a string array.
     * @return 
     */
    private String[] getAllTeachersLastName() {   
        List_extended<List_extended<String>> lehrerList;
        con.executeQuery("SELECT DISTINCT * FROM lehrer ORDER BY nachname");
        lehrerList = con.getResults();
        int amount = con.getResultsAmount();
        String[][] lehrer = new String[amount][2];
            
        lehrerList.toFirst();
        for(int i = 0; i < lehrer.length; i++){
            List_extended<String> l2 = lehrerList.getObject();
            l2.toFirst();

            for(int j = 0; j < lehrer[i].length; j++){
                lehrer[i][j] = l2.getObject();
                l2.next();
            }

            lehrerList.next();
        }
        String[] output = new String[amount];
        for (int i = 0; i < amount; i++) {
            output[i] = lehrer[i][0];
        }
        return output;
    }
    
    /**
     * Returns the last names of all teachers as a string array.
     * @return 
     */
    private String[] getAllTeachersNames() {   
        List_extended<List_extended<String>> lehrerList;
        con.executeQuery("SELECT nachname, vorname FROM lehrer ORDER BY nachname");
        lehrerList = con.getResults();
        int amount = con.getResultsAmount();
        String[][] lehrer = new String[amount][2];
            
        lehrerList.toFirst();
        for(int i = 0; i < lehrer.length; i++){
            List_extended<String> l2 = lehrerList.getObject();
            l2.toFirst();

            for(int j = 0; j < lehrer[i].length; j++){
                lehrer[i][j] = l2.getObject();
                l2.next();
            }

            lehrerList.next();
        }
        String[] output = new String[amount];
        for (int i = 0; i < amount; i++) {
            output[i] = lehrer[i][1] + " " + lehrer[i][0];
        }
        return output;
    }
    
    /**
     * Return the room the given teacher is in.
     * @return 
     */
    private String getRoomOfTeacher(String tLastname) {
        List_extended<List_extended<String>> result;
        con.executeQuery("SELECT raum FROM raumverteilung WHERE nachname = '" + tLastname + "'");
        result = con.getResults();
        result.toFirst();
        result.getObject().toFirst();
        return result.getObject().getObject();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMI_LehrerEntfernen;
    private javax.swing.JMenuItem jMI_LehrerHinzufuegen;
    private javax.swing.JMenuItem jMI_Lehrerliste;
    private javax.swing.JMenuItem jMI_RaumAendern;
    private javax.swing.JMenuItem jMI_Save;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
