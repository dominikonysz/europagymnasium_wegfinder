/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend;

import backend.WegfinderBack;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Dominik Onyszkiewicz
 */
public class UserInterface extends javax.swing.JFrame {

    private static UserInterface ui;
    private WegfinderBack backend;
    private WegfinderFront frontend;
    private Navigator navi;
    private TSEFront se;
    
    private boolean lnInputStarted, fnInputStarted;
    private JFrame frame;
    private String[] allRooms;
    
    private UserInterface() {
        super("Benutzerschnittstelle");
        initComponents();
        
        backend = WegfinderBack.getBackend();
        frontend = new WegfinderFront();
        backend.connectFrontend(frontend);
        navi = new Navigator();
        
        allRooms = WegfinderBack.allRooms;
        
        jCB_From.setModel(new DefaultComboBoxModel(WegfinderBack.allRooms));
        jCB_To.setModel(new DefaultComboBoxModel(WegfinderBack.allRooms));
        
        
        // Exit the TeacherSearchEngine with ESC
        JPanel panel = (JPanel) this.getContentPane();
        panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_S, 0), "opense");
        panel.getActionMap().put("opense", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                bSEActionPerformed(null);
            }
        });
    }
    
    public static UserInterface getUI() {
        return ui;
    }
    
    public static void createUI() {
        ui = new UserInterface();
    }
    
    public Navigator getNavigator() {
        return navi;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCB_From = new javax.swing.JComboBox<>();
        jCB_To = new javax.swing.JComboBox<>();
        bSearch = new javax.swing.JButton();
        bSE = new javax.swing.JButton();
        bPrint = new javax.swing.JButton();
        bExit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        pInformations = new javax.swing.JPanel();
        lCurrentPath = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lFrom = new javax.swing.JLabel();
        lTo = new javax.swing.JLabel();
        lGPScale = new javax.swing.JLabel();
        lGPScaleValue = new javax.swing.JLabel();
        pRoomInformations = new javax.swing.JPanel();
        lTeachers = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMI_LehrerHinzufuegen = new javax.swing.JMenuItem();
        jMI_LehrerEntfernen = new javax.swing.JMenuItem();
        jMI_RaumAendern = new javax.swing.JMenuItem();
        jMI_Lehrerliste = new javax.swing.JMenuItem();
        jMI_Save = new javax.swing.JMenuItem();
        jMI_Initialize = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jCB_From.setMaximumRowCount(15);
        jCB_From.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCB_To.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        bSearch.setText("Search");
        bSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchActionPerformed(evt);
            }
        });

        bSE.setText("Search Engine");
        bSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSEActionPerformed(evt);
            }
        });

        bPrint.setText("Print");
        bPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrintActionPerformed(evt);
            }
        });

        bExit.setText("Exit");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        jButton1.setText("Ground Plan Navigator");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pInformations.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informations", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        lCurrentPath.setText("Current Path: ");

        jLabel1.setText("From: ");

        jLabel2.setText("To: ");

        lFrom.setText("-");

        lTo.setText("-");

        lGPScale.setText("GP Scale: ");

        lGPScaleValue.setText("-");

        pRoomInformations.setBorder(javax.swing.BorderFactory.createTitledBorder("RoomInformations"));

        lTeachers.setText("Click on a room to get informations");

        javax.swing.GroupLayout pRoomInformationsLayout = new javax.swing.GroupLayout(pRoomInformations);
        pRoomInformations.setLayout(pRoomInformationsLayout);
        pRoomInformationsLayout.setHorizontalGroup(
            pRoomInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pRoomInformationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lTeachers)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pRoomInformationsLayout.setVerticalGroup(
            pRoomInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pRoomInformationsLayout.createSequentialGroup()
                .addComponent(lTeachers)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pInformationsLayout = new javax.swing.GroupLayout(pInformations);
        pInformations.setLayout(pInformationsLayout);
        pInformationsLayout.setHorizontalGroup(
            pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pInformationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lCurrentPath)
                    .addGroup(pInformationsLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pInformationsLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lFrom))
                            .addGroup(pInformationsLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lTo))))
                    .addGroup(pInformationsLayout.createSequentialGroup()
                        .addComponent(lGPScale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lGPScaleValue)))
                .addContainerGap(205, Short.MAX_VALUE))
            .addGroup(pInformationsLayout.createSequentialGroup()
                .addComponent(pRoomInformations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pInformationsLayout.setVerticalGroup(
            pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pInformationsLayout.createSequentialGroup()
                .addComponent(lCurrentPath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lTo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pInformationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lGPScale)
                    .addComponent(lGPScaleValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pRoomInformations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 80, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pInformations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bSE, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCB_From, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCB_To, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(bPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCB_From, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCB_To, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bPrint)
                    .addComponent(bExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pInformations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMenu1.setText("Verwaltung");

        jMI_LehrerHinzufuegen.setText("Lehrer hinzufügen");
        jMI_LehrerHinzufuegen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerHinzufuegenActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_LehrerHinzufuegen);

        jMI_LehrerEntfernen.setText("Lehrer entfernen");
        jMI_LehrerEntfernen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerEntfernenActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_LehrerEntfernen);

        jMI_RaumAendern.setText("Raum ändern");
        jMI_RaumAendern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_RaumAendernActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_RaumAendern);

        jMI_Lehrerliste.setText("Lehrerliste");
        jMI_Lehrerliste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_LehrerlisteActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Lehrerliste);

        jMI_Save.setText("Speichern");
        jMI_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_SaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Save);

        jMI_Initialize.setText("Initialisieren");
        jMI_Initialize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMI_InitializeActionPerformed(evt);
            }
        });
        jMenu1.add(jMI_Initialize);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMI_LehrerHinzufuegenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerHinzufuegenActionPerformed
        lnInputStarted = true;
        fnInputStarted = true;
        frame = new JFrame("Lehrer hinzufügen");
        frame.setSize(280, 200);
        frame.setResizable(false);
        frame.setLayout(null);
        
        JComboBox rooms = new JComboBox();
        rooms.setModel(new DefaultComboBoxModel(allRooms));
        rooms.setBounds(19, 20, frame.getWidth() - 43, 23);
        
        JTextField lastname = new JTextField("Nachname");
        lastname.setBounds(19, 50, frame.getWidth() - 43, 23);
        lastname.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(lnInputStarted) {
                    lastname.setText("");
                    lnInputStarted = false;
                }
            }
        });
        
        JTextField firstname = new JTextField("Vorname");
        firstname.setBounds(19, 80, frame.getWidth() - 43, 23);
        firstname.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(fnInputStarted) {
                    firstname.setText("");
                    fnInputStarted = false;
                }
            }
        });
        
        JCheckBox prevented = new JCheckBox("Verhindert");
        prevented.setBounds(19, 110, frame.getWidth() - 43, 23);
        
        JButton bInsert = new JButton("Hinzufügen");
        bInsert.setBounds(19, 140, frame.getWidth() - 43, 23);
        bInsert.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(lastname.getText().equals("") || lastname.getText().equals("Nachname") || firstname.getText().equals("Vorname")) {
                    JOptionPane.showMessageDialog(frame, "Bitte einen gültigen Lehrer eingeben");
                }
                else {
                    switch(backend.addTeacher(firstname.getText(), lastname.getText(), (String) rooms.getSelectedItem(), prevented.isSelected())) {
                        case -1:
                            JOptionPane.showMessageDialog(frame, "Lehrer bereits vorhanden");
                            break;
                        default:
                            JOptionPane.showMessageDialog(frame, firstname.getText() + " " 
                                    + lastname.getText() + " wurde erfolgreich in " 
                                    + rooms.getSelectedItem() + " eingetragen");
                            lnInputStarted = true;
                            fnInputStarted = true;
                            rooms.setSelectedIndex(0);
                            lastname.setText("Nachname");
                            firstname.setText("Vorname");
                            break;
                    }
                }
            }
        });
        
        frame.getContentPane().add(rooms);
        frame.getContentPane().add(lastname);
        frame.getContentPane().add(firstname);
        frame.getContentPane().add(prevented);
        frame.getContentPane().add(bInsert);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_LehrerHinzufuegenActionPerformed

    private void jMI_LehrerEntfernenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerEntfernenActionPerformed
        frame = new JFrame("Lehrer entfernen");
        frame.setSize(280, 120);
        frame.setResizable(false);
        frame.setLayout(null);
        
        JComboBox teachers = new JComboBox();
        teachers.setModel(new DefaultComboBoxModel(backend.getAllTeachersNames()));
        teachers.setBounds(19, 20, frame.getWidth() - 43, 23);
        
        JButton bRemove = new JButton("Löschen");
        bRemove.setBounds(19, 50, frame.getWidth() - 43, 23);
        bRemove.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String item = (String) teachers.getSelectedItem();
                if(item != null) {
                    String firstname = item.substring(0, item.indexOf(" "));
                    String lastname = item.substring(item.indexOf(" ") + 1);
                    backend.removeTeacher(firstname, lastname);
                    JOptionPane.showMessageDialog(frame, "\"" + firstname + " " + lastname + "\" wurde erfolgreich entfernt");
                    teachers.setModel(new DefaultComboBoxModel(backend.getAllTeachersNames()));
                }
                else {
                    JOptionPane.showMessageDialog(frame, "Bitte einen Lehrer auswählen");
                }
            }
        });
        
        frame.getContentPane().add(teachers);
        frame.getContentPane().add(bRemove);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_LehrerEntfernenActionPerformed

    private void jMI_RaumAendernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_RaumAendernActionPerformed
        frame = new JFrame("Raum ändern");
        frame.setSize(280, 150);
        frame.setResizable(false);
        frame.setLayout(null);
        
        JComboBox rooms = new JComboBox();
        rooms.setModel(new DefaultComboBoxModel(allRooms));
        rooms.setBounds(19, 20, frame.getWidth() - 43, 23);
        
        JComboBox teachers = new JComboBox();
        teachers.setModel(new DefaultComboBoxModel(backend.getAllTeachersLastName()));
        teachers.setBounds(19, 50, frame.getWidth() - 43, 23);
        teachers.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED) {
                    rooms.setSelectedItem(backend.getRoomOfTeacher((String) e.getItem()));
                }
            }
        });
        
        if(teachers.getSelectedItem() != null)
            rooms.setSelectedItem(backend.getRoomOfTeacher((String) teachers.getSelectedItem()));
        
        JButton bUpdate = new JButton("Ändern");
        bUpdate.setBounds(19, 80, frame.getWidth() - 43, 23);
        bUpdate.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO: Support for first and last name, so every teacher can get selected
                backend.changeRoom((String) rooms.getSelectedItem(), (String) teachers.getSelectedItem());
                JOptionPane.showMessageDialog(frame, "Raum von \"" + teachers.getSelectedItem() + "\" wurde erfolgreich zu " + rooms.getSelectedItem() + " geändert");
            }
        });
        
        frame.getContentPane().add(rooms);
        frame.getContentPane().add(teachers);
        frame.getContentPane().add(bUpdate);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_RaumAendernActionPerformed

    private void jMI_LehrerlisteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_LehrerlisteActionPerformed

        BufferedImage img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = img.createGraphics();
        FontMetrics fm = g2d.getFontMetrics();

        String table = "";
        String newRow;
        for(String[] s : backend.getTeacherList()) {
            newRow = "  " + s[0] + ", " + s[1];
            int missingSpace = 200 - fm.stringWidth(newRow);
            for (int i = 0; i < missingSpace / fm.stringWidth(" "); i++) {
                newRow += " ";
            }
            newRow += s[2] + "\n";
            table += newRow;
        }
        g2d.dispose();
        
        // new window with a textarea for all teachers
        frame = new JFrame("Lehrerliste");
        frame.setSize(400, 400);
        
        JTextArea textArea = new JTextArea();
        textArea.setText(table);
        textArea.setEditable(false);
        
        JScrollPane scrollPane = new JScrollPane(textArea);
        
        frame.add(scrollPane);
        
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }//GEN-LAST:event_jMI_LehrerlisteActionPerformed

    /**
     * Repaints the frame when it is resized.
     * @param evt 
     */
    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        repaint();
    }//GEN-LAST:event_formAncestorResized

    /**
     * Lets the user choose a directory and saves the databases content in it
     * as a .txt file
     * @param evt 
     */
    private void jMI_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_SaveActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(null);
        File f;
        String path = "";
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            f = fc.getSelectedFile();
            path = f.getPath();
            
            switch(backend.saveDatabase(path)) {
                case -1:
                    JOptionPane.showMessageDialog(this, "Datei konnte nicht erstellt werden", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                case 0:
                    JOptionPane.showMessageDialog(this, "Fehler bei Speicherung der Datenbank", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                default:
                    JOptionPane.showMessageDialog(this, "Datenbank wurde erfolgreich unter " + path + "\\Portable.txt gespeichert", "Success", JOptionPane.INFORMATION_MESSAGE);
                    break;
            }
        }
    }//GEN-LAST:event_jMI_SaveActionPerformed

    private void jMI_InitializeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMI_InitializeActionPerformed
        backend.initializeDatabase();
        frontend.dispose();
        this.dispose();
    }//GEN-LAST:event_jMI_InitializeActionPerformed

    private void bSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchActionPerformed
        String from = (String) jCB_From.getSelectedItem();
        String to = (String) jCB_To.getSelectedItem();
        lFrom.setText(from);
        lTo.setText(to);
        backend.drawPath(from, to);
    }//GEN-LAST:event_bSearchActionPerformed

    private void bPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrintActionPerformed
        backend.print();
    }//GEN-LAST:event_bPrintActionPerformed

    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        String[] options = new String[] {"Yes", "No"};
        int n = JOptionPane.showOptionDialog(frame,
        "Do you really want to exit?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]);
        System.out.println(n);
        if(n == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_bExitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        navi.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void bSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSEActionPerformed
        if(se != null) {
            se.setVisible(true);
        }
        else {
            se = new TSEFront();
            se.setVisible(true);
        }
    }//GEN-LAST:event_bSEActionPerformed

    public void updateInformations() {
        lGPScaleValue.setText(Double.toString(frontend.getGroundPlan().getScale()));
    }
    
    public void updatePath(String from, String to) {
        lFrom.setText(from);
        lTo.setText(to);
    }
    
    public void updateRoomInformations(String room, String teachers) {
        ((TitledBorder) pRoomInformations.getBorder()).setTitle(room);
        lTeachers.setText(teachers);
        pRoomInformations.repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bExit;
    private javax.swing.JButton bPrint;
    private javax.swing.JButton bSE;
    private javax.swing.JButton bSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jCB_From;
    private javax.swing.JComboBox<String> jCB_To;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMI_Initialize;
    private javax.swing.JMenuItem jMI_LehrerEntfernen;
    private javax.swing.JMenuItem jMI_LehrerHinzufuegen;
    private javax.swing.JMenuItem jMI_Lehrerliste;
    private javax.swing.JMenuItem jMI_RaumAendern;
    private javax.swing.JMenuItem jMI_Save;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lCurrentPath;
    private javax.swing.JLabel lFrom;
    private javax.swing.JLabel lGPScale;
    private javax.swing.JLabel lGPScaleValue;
    private javax.swing.JLabel lTeachers;
    private javax.swing.JLabel lTo;
    private javax.swing.JPanel pInformations;
    private javax.swing.JPanel pRoomInformations;
    // End of variables declaration//GEN-END:variables
}
