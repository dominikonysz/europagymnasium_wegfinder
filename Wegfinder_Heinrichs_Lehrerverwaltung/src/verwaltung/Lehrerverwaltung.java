/*
 * This class is used to manipulate the database of the teachers of the grammar school.
 */

package verwaltung;

import adt.List_extended;
import db.DBReader;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Bjoern Heinrichs
 */
public class Lehrerverwaltung extends javax.swing.JFrame {

    /**
     * Creates new form Lehrerverwaltung
     */
    public Lehrerverwaltung() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lehrerverwaltung");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Tools zur Verwaltung der Datensätze:");

        jButton1.setText("Alle Lehrer anzeigen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAll(evt);
            }
        });

        jButton2.setText("Lehrer suchen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search(evt);
            }
        });

        jButton3.setText("Lehrer hinzufügen");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add(evt);
            }
        });

        jButton4.setText("Lehrer löschen");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete(evt);
            }
        });

        jButton5.setText("Programm schließen");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quit(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Returns all teachers in the database.
     * 
     * @param evt The event calling the method.
     */
    private void searchAll(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAll
        showResults("SELECT * FROM Lehrer", 0);
    }//GEN-LAST:event_searchAll

    /**
     * This method searches for a teacher with a specific last name.
     * 
     * @param evt The event calling the method.
     */
    private void search(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search
        String s = JOptionPane.showInputDialog("Welche Lehrkraft (Nachname) ist gesucht?");
        
        showResults("SELECT * FROM Lehrer WHERE Nachname = '" + s + "'", 1);
    }//GEN-LAST:event_search

    /**
     * This methods adds a teacher to the database.
     * 
     * @param evt The event calling the meethod.
     */
    private void add(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add
        String nname = JOptionPane.showInputDialog("Nachname der neuen Lehrkraft?");
        String vname = JOptionPane.showInputDialog("Vorname der neuen Lehrkraft?");
        
        addToDB(nname, vname);
    }//GEN-LAST:event_add

    /**
     * This method deletes a teacher from the database.
     * 
     * @param evt The event calling the method.
     */
    private void delete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete
        String nname = JOptionPane.showInputDialog("Nachname der zu löschenden Lehrkraft?");
        String vname = JOptionPane.showInputDialog("Vorname der zu löschenden Lehrkraft?");
        
        deleteFromDB(nname, vname);
    }//GEN-LAST:event_delete

    /**
     * This method closes the frame.
     * 
     * @param evt The eventcallung the method.
     */
    private void quit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quit
        this.dispose();
    }//GEN-LAST:event_quit

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lehrerverwaltung().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Method to show the results of a query.
     * 
     * @param query The query to be executed
     * @param k Identifier for the kind of query (0 = search all teachers, 1 = search specific teacher)
     */
    private void showResults(String query, int k) {
        DBReader r = new DBReader();
        
        r.executeQuery(query);
            
        List_extended<List_extended<String>> l = r.getResults();
            
        String[][] s = new String[r.getResultsAm()][2];
            
        l.toFirst();
            
        for(int i = 0; i < s.length; i++){
            List_extended<String> l2 = l.getObject();
            l2.toFirst();
                
            for(int j = 0; j < s[i].length; j++){
                s[i][j] = l2.getObject();
                l2.next();
            }
                
            l.next();
        }
            
        String res = "";
            
        for(int i = 0; i < s.length; i++){
            res = res + "\n" + s[i][1] + " " + s[i][0];
        }
            
        switch(k){
            case 0:
                switch(s.length){
                case 0:
                    JOptionPane.showMessageDialog(null, "Es sind aktuell keine Lehrer in der Datenbank gespeichert.", "Ergebnis Ihrer Suche", JOptionPane.PLAIN_MESSAGE);
                    break;
                case 1:
                    JOptionPane.showMessageDialog(null, "In der Datenbank befindet sich folgende Lehrkraft:" + res, "Ergebnis Ihrer Suche", JOptionPane.PLAIN_MESSAGE);
                    break;
                
                default:
                    JOptionPane.showMessageDialog(null, "In der Datenbank befinden sich folgende Lehrkräfte:" + res, "Ergebnis Ihrer Suche", JOptionPane.PLAIN_MESSAGE);
            }
            break;
                
            case 1:
                switch(s.length){
                case 0:
                    JOptionPane.showMessageDialog(null, "Ihre Suche lieferte keine Ergebnisse!\nBitte überprüfen Sie Ihre Eingabe gegebenenfalls auf Fehler oder überprüfen Sie, ob der/die gesuchte LehrerIn verhindert ist.", "Ergebnis Ihrer Suche", JOptionPane.PLAIN_MESSAGE);
                    break;
                case 1:
                    JOptionPane.showMessageDialog(null, "In der Datenbank befindet sich folgende Lehrkraft mit dem gesuchten Nachnamen:" + res, "Ergebnis Ihrer Suche", JOptionPane.PLAIN_MESSAGE);
                    break;
                
                default:
                    JOptionPane.showMessageDialog(null, "In der Datenbank befinden sich folgende Lehrkräfte mit dem gesuchten Nachnamen:" + res, "Ergebnis Ihrer Suche", JOptionPane.PLAIN_MESSAGE);
            }
        }
    }

    /**
     * Adds a data set to the database.
     * 
     * @param nname Last name of the teacher.
     * @param vname First name of the teacher.
     */
    private void addToDB(String nname, String vname) {
        DBReader r = new DBReader();
        
        if(!r.existsInDB(nname, vname)){
            r.executeUpdate("INSERT INTO Lehrer VALUES ('" + nname + "', '" + vname + "')");
            JOptionPane.showMessageDialog(null, "Hinzufügen erfolgreich!");
        } else
            JOptionPane.showMessageDialog(null, "Dieser Lehrer existiert bereits als Datensatz in der Datenbank!", "Fehlermeldung", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Deletes a data set from the database.
     * 
     * @param nname Last name of the teacher.
     * @param vname First name of the teacher.
     */
    private void deleteFromDB(String nname, String vname) {
        DBReader r = new DBReader();
        
        if(r.existsInDB(nname, vname)){
            r.executeUpdate("DELETE FROM Lehrer WHERE Nachname ='" + nname + "' AND Vorname = '" + vname + "'");
            JOptionPane.showMessageDialog(null, "Löschen erfolgreich!");
        } else
            JOptionPane.showMessageDialog(null, "Dieser Lehrer existiert nicht als Datensatz in der Datenbank!", "Fehlermeldung", JOptionPane.ERROR_MESSAGE);
    }
}
